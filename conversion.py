# Приведение типов (англ. conversion) - процесс преобразования типа данных у одного объекта в другой
# например, строку в число или число в строку.

# 1) Неявное приведение типов - когда Пайтон делает все без нашего участия
a = 10      # это тип integer, целые числа
b = 3.4987     # это тип float, числа с плавающей точкой (нецелые)
c = a + b
print(c, type(c))   # функция type определяет тип объекта, тут выводим переменную и ее тип: 13.4987 <class 'float'>

# b = '3.4987' прописать как тип string, со строкой не сработает:
# TypeError: unsupported operand type(s) for +: 'int' and 'str' - невозможно соединить число и строку!

# 2) Явное приведение типов - когда мы в явном виде прописываем, нам это надо сделать числом (или строкой)
# Основные функции приведения типов:
# 3. str() — преобразует значение в строку.
b = str(b)  # явно указываем, что b строковая переменная
print(b,type(b))   # тогда получим строку: 3.4987 <class 'str'> (по факту будет то же число в кавычках!)
a = str(a)
print(a,type(a))

# 1. int() — преобразует значение в целое число (integer).
d = 4.205923
d = int(d)  # явно указываем, что d целочисленная переменная
print(d,type(d)) # тогда получим только целую часть: 4 <class 'int'>

# 2. float() — преобразует значение в число с плавающей точкой (вещественное).
b = float(b)
print(b,type(b))    # получилось из str(b) обратно сделать float(b): 3.4987 <class 'float'>

# Есть ограничения, например:
# s = "brwbrer"   # это строка
# s = int(s)
# print(s,type(s))    # строку в число превратить не получится: ValueError: invalid literal for int() with base 10: 'brwbrer'

# 4. bool() — преобразует значение в логический тип ( True или False).
print(bool(0)) # Значения 0 , 0.0 , None , "" (пустая строка) преобразуются в False .
print(bool("")) # False
print(bool(42)) # Все остальные значения — в True.
print(bool("Python")) # True

# 5. list() , tuple(), set() — преобразуют коллекции в список, кортеж или множество.
# Можно преобразовать список в кортеж, множество или наоборот:
my_list = [1, 2, 3]
my_tuple = tuple(my_list) # Преобразуем список в кортеж
print(my_tuple) # (1, 2, 3)
my_set = set(my_list) # Преобразуем список в множество
print(my_set) # {1, 2, 3}
new_list = list(my_tuple) # Преобразуем кортеж обратно в список
print(new_list) # [1, 2, 3]

# 6. Преобразование строки в список или множество
# Строку можно разбить на отдельные символы и преобразовать в список или множество:
word = "hello"
letters_list = list(word) # ['h', 'e', 'l', 'l', 'o']
letters_set = set(word) # {'h', 'e', 'l', 'o'}
print(letters_list)
print(letters_set)

# 7. Обработка ошибок при приведении типов
# Если преобразование невозможно, Python выбросит ошибку:
num_str = "abc"
try:
    num = int(num_str) # Попытка преобразовать "abc" в число
except ValueError:
    print("Невозможно преобразовать строку в число!")

# 8. Пример из жизни
# Сложение чисел, введённых пользователем
# Ввод через input() всегда возвращает строку. Чтобы сложить два числа, нужно
# преобразовать их в int или float:
num1 = input("Введите первое число: ")
num2 = input("Введите второе число: ")
sum_result = int(num1) + int(num2) # # Преобразуем строки в числа
print("Сумма чисел:", sum_result)
# Если пользователь введёт "5" и "7", программа выведет:
# Сумма чисел: 12



